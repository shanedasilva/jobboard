// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String            @unique @id @default(uuid())
  firstName    String?           @map("first_name")
  lastName     String?           @map("last_name")
  email        String?           @unique @map("email")
  clerkUserId  String?           @unique @map("clerk_user_id")
  stripeUserId String?           @unique @map("stripe_user_id")
  createdAt    DateTime          @default(now()) @map("created_at")
  updatedAt    DateTime          @updatedAt @map("updated_at")
  applications JobApplication[]
  jobs         Job[]
  organization OrganizationUser?
  resume       Resume?

  @@map("users")
}

model Resume {
  id           String             @unique @id @default(uuid())
  userId       String             @unique @map("user_id")
  firstName    String             @map("first_name")
  lastName     String             @map("last_name")
  location     String
  summary      String?
  createdAt    DateTime           @default(now()) @map("created_at")
  updatedAt    DateTime           @updatedAt @map("updated_at")
  applications JobApplication[]
  education    ResumeEducation[]
  experience   ResumeExperience[]
  skills       ResumeSkills[]
  user         User               @relation(fields: [userId], references: [id])

  @@map("resumes")
}

model ResumeEducation {
  id                String    @unique @id @default(uuid())
  resumeId          String    @map("resume_id")
  educationLevel    String    @map("education_level")
  field             String    @map("field")
  school            String    @map("school")
  location          String    @map("location")
  currentlyEnrolled Boolean   @default(false) @map("currently_enrolled")
  enrolledFrom      DateTime? @map("enrolled_from")
  enrolledTo        DateTime? @map("enrolled_to")
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt @map("updated_at")
  resume            Resume    @relation(fields: [resumeId], references: [id])

  @@map("resume_educations")
}

model ResumeExperience {
  id                String    @unique @id @default(uuid())
  resumeId          String?   @map("resume_id")
  jobTitle          String?   @map("job_title")
  company           String?   @map("company")
  location          String?   @map("location")
  currentlyEmployed Boolean?  @default(false) @map("currently_employed")
  startDate         DateTime? @map("start_date")
  endDate           DateTime? @map("end_date")
  description       String?
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt @map("updated_at")
  resume            Resume?   @relation(fields: [resumeId], references: [id])

  @@map("resume_experience")
}

model ResumeSkills {
  id        String   @unique @id @default(uuid())
  resumeId  String?  @map("resume_id")
  name      String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  resume    Resume?  @relation(fields: [resumeId], references: [id])

  @@map("resume_skills")
}

model Organization {
  id        String             @unique @id @default(uuid())
  name      String             @unique
  slug      String             @unique
  website   String?            @map("website")
  featured  Boolean            @default(false) @map("featured")
  createdAt DateTime           @default(now()) @map("created_at")
  updatedAt DateTime           @updatedAt @map("updated_at")
  jobs      Job[]
  users     OrganizationUser[]

  @@map("organizations")
}

model OrganizationUser {
  user           User         @relation(fields: [userId], references: [id])
  userId         String       @unique @map("user_id")
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String       @unique @map("organization_id")
  assignedAt     DateTime     @default(now())

  @@id([userId, organizationId])
  @@map("organizations_users")
}

model Tag {
  id        String   @unique @id @default(uuid())
  name      String   @unique 
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  jobs      JobTag[]

  @@map("tag")
}

model Job {
  id              String           @unique @id @default(uuid())
  title           String
  slug            String           @unique
  jobType         JobType
  location        String
  compType        JobCompType      @map("comp_type")
  payScaleBegin   Int              @map("pay_scale_begin")
  payScaleEnd     Int              @map("pay_scale_end")
  description     String
  jobLocType      JobLocType       @map("job_location_type")
  status          JobStatus        @default(DRAFT)
  category        String           @map("category")
  customQuestions Json[]           @map("custom_questions")
  stripeSessionId String?          @unique @map("stripe_session_id")
  organizationId  String           @map("organization_id")
  userId          String           @map("user_id")
  activeUntil     DateTime?        @map("active_until")
  createdAt       DateTime         @default(now()) @map("created_at")
  updatedAt       DateTime         @updatedAt @map("updated_at")
  tags            JobTag[]       
  applications    JobApplication[]
  organization    Organization     @relation(fields: [organizationId], references: [id])
  user            User             @relation(fields: [userId], references: [id])

  @@map("jobs")
}

model JobApplication {
  id              String               @unique @default(uuid())
  jobId           String               @map("job_id")
  userId          String               @map("user_id")
  status          JobApplicationStatus @default(APPLIED)
  resumeId        String               @map("resume_id")
  createdAt       DateTime             @default(now()) @map("created_at")
  updatedAt       DateTime             @updatedAt @map("updated_at")
  job             Job                  @relation(fields: [jobId], references: [id])
  resume          Resume               @relation(fields: [resumeId], references: [id])
  user            User                 @relation(fields: [userId], references: [id])
  questionAnswers Json[]               @map("question_answers")

  @@map("job_applications")
}

model JobTag {
  job        Job      @relation(fields: [jobId], references: [id])
  jobId      String   @unique @map("job_id")
  tag        Tag      @relation(fields: [tagId], references: [id])
  tagId      String   @unique @map("tag_id")
  assignedAt DateTime @default(now())

  @@id([jobId, tagId])
  @@map("jobs_tags")
}

enum OrganizationRole {
  RECRUITER
  ADMIN
}

enum JobType {
  FULL_TIME
  PART_TIME
  CONTRACT
}

enum JobLocType {
  REMOTE
  HYBRID
  OFFICE
}

enum JobCompType {
  SALARY
  HOURLY
}

enum JobStatus {
  DRAFT
  PAYMENT_PROCESSING
  OPEN
  PAUSED
  CLOSED
}

enum JobApplicationStatus {
  APPLIED
  WITHDRAWN
  INTERVIEWING
  HIRED
  CLOSED
}