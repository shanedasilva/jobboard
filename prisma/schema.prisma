// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String            @unique @id @default(uuid())
  firstName    String?           @map("first_name")
  lastName     String?           @map("last_name")
  email        String?           @unique @map("email")
  clerkUserId  String?           @unique @map("clerk_user_id")
  stripeUserId String?           @unique @map("stripe_user_id")
  applications JobApplication[]
  jobs         Job[]
  organization OrganizationUser?
  resume       Resume?
  createdAt    DateTime          @default(now()) @map("created_at")
  updatedAt    DateTime          @updatedAt @map("updated_at")
  deletedAt    DateTime?         @map("deleted_at")

  @@map("users")
}

model Resume {
  id           String             @unique @id @default(uuid())
  userId       String             @unique @map("user_id")
  firstName    String             @map("first_name")
  lastName     String             @map("last_name")
  location     String
  summary      String?
  applications JobApplication[]
  education    ResumeEducation[]
  experience   ResumeExperience[]
  skills       ResumeSkills[]
  user         User               @relation(fields: [userId], references: [id])
  createdAt    DateTime           @default(now()) @map("created_at")
  updatedAt    DateTime           @updatedAt @map("updated_at")
  deletedAt    DateTime?          @map("deleted_at")

  @@map("resumes")
}

model ResumeEducation {
  id                String    @unique @id @default(uuid())
  resumeId          String    @map("resume_id")
  educationLevel    String    @map("education_level")
  field             String    @map("field")
  school            String    @map("school")
  location          String    @map("location")
  currentlyEnrolled Boolean   @default(false) @map("currently_enrolled")
  enrolledFrom      DateTime? @map("enrolled_from")
  enrolledTo        DateTime? @map("enrolled_to")
  resume            Resume    @relation(fields: [resumeId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt @map("updated_at")
  deletedAt         DateTime? @map("deleted_at")

  @@map("resume_educations")
}

model ResumeExperience {
  id                String    @unique @id @default(uuid())
  resumeId          String?   @map("resume_id")
  jobTitle          String?   @map("job_title")
  company           String?   @map("company")
  location          String?   @map("location")
  currentlyEmployed Boolean?  @default(false) @map("currently_employed")
  startDate         DateTime? @map("start_date")
  endDate           DateTime? @map("end_date")
  description       String?
  resume            Resume?   @relation(fields: [resumeId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt @map("updated_at")
  deletedAt         DateTime? @map("deleted_at")

  @@map("resume_experience")
}

model ResumeSkills {
  id        String    @unique @id @default(uuid())
  resumeId  String?   @map("resume_id")
  name      String
  resume    Resume?   @relation(fields: [resumeId], references: [id])
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  @@map("resume_skills")
}

model Organization {
  id          String               @unique @id @default(uuid())
  externalId  Int?                 @unique @map("external_id")
  name        String               @map("name")
  description String?              @map("description")
  logoURL     String?              @map("logo_url")
  websiteURL  String?              @map("website_url")
  linkedinURL String?              @map("linkedin_url")
  twitterURL  String?              @map("twitter_url")
  slug        String               @unique
  featured    Boolean?             @default(false) @map("featured")
  typeId      String? 
  type        OrganizationType?    @relation(fields: [typeId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  jobs        Job[]
  users       OrganizationUser[]
  createdAt   DateTime             @default(now()) @map("created_at")
  updatedAt   DateTime             @updatedAt @map("updated_at")
  deletedAt   DateTime?            @map("deleted_at")

  @@map("organizations")
}

model OrganizationType {
  id            String         @unique @default(uuid())
  externalId    Int?           @unique @map("external_id")
  name          String         @map("name")
  slug          String         @unique @map("slug")
  organizations Organization[]

  @@map("organization_types")
}

model OrganizationUser {
  user           User         @relation(fields: [userId], references: [id])
  userId         String       @unique @map("user_id")
  organization   Organization @relation(fields: [organizationId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  organizationId String       @unique @map("organization_id")
  assignedAt     DateTime     @default(now())

  @@id([userId, organizationId])
  @@map("organizations_users")
}

model Tag {
  id        String    @unique @id @default(uuid())
  name      String    @unique 
  jobs      JobTag[]
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  @@map("tag")
}

model Job {
  id              String           @unique @id @default(uuid())
  externalId      Int?             @unique @map("external_id")
  title           String           @map("title")
  slug            String           @unique @map("slug")
  applyURL        String           @map("apply_url")
  compType        JobCompType      @map("comp_type")
  payScaleBegin   Int?             @map("pay_scale_begin")
  payScaleEnd     Int?             @map("pay_scale_end")
  payCurrency     String?          @map("pay_currency")
  description     String           @map("description")
  jobLocType      JobLocType       @map("job_location_type")
  status          JobStatus        @default(DRAFT)
  customQuestions Json[]           @map("custom_questions")
  stripeSessionId String?          @unique @map("stripe_session_id")
  activeUntil     DateTime?        @map("active_until")
  tags            JobTag[]         
  applications    JobApplication[] 
  typeId          String           @map("job_id")
  type            JobType          @relation(fields: [typeId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  organizationId  String
  organization    Organization     @relation(fields: [organizationId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  userId          String?          @map("user_id")
  user            User?            @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  industryId      String?          @map("industry_id")
  industry        JobIndustry?     @relation(fields: [industryId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  cityId          String?          @map("city_id")
  city            JobCity?         @relation(fields: [cityId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  createdAt       DateTime         @default(now()) @map("created_at")
  updatedAt       DateTime         @updatedAt @map("updated_at")
  deletedAt       DateTime?        @map("deleted_at")

  @@map("jobs")
}

model JobApplication {
  id              String               @unique @default(uuid())
  jobId           String               @map("job_id")
  userId          String               @map("user_id")
  status          JobApplicationStatus @default(APPLIED)
  resumeId        String               @map("resume_id")
  job             Job                  @relation(fields: [jobId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  resume          Resume               @relation(fields: [resumeId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  user            User                 @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  questionAnswers Json[]               @map("question_answers")
  createdAt       DateTime             @default(now()) @map("created_at")
  updatedAt       DateTime             @updatedAt @map("updated_at")
  deletedAt       DateTime?            @map("deleted_at")

  @@map("job_applications")
}

model JobTag {
  job        Job      @relation(fields: [jobId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  jobId      String   @unique @map("job_id")
  tag        Tag      @relation(fields: [tagId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  tagId      String   @unique @map("tag_id")
  assignedAt DateTime @default(now())

  @@id([jobId, tagId])
  @@map("job_tags")
}

model JobCity {
  id         String     @unique @default(uuid())
  externalId Int?       @unique @map("external_id")
  name       String     @map("name")
  slug       String     @unique @map("slug")
  timezone   String     @map("timezone")
  latitude   String     @map("latitude")
  longitude  String     @map("longitude")
  countryId  String 
  country    JobCountry @relation(fields: [countryId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  jobs       Job[]

  @@map("job_cities")
}

model JobCountry {
  id         String    @unique @default(uuid())
  externalId Int?      @unique @map("external_id")
  code       String    @unique @map("code")
  name       String    @unique @map("name")
  slug       String    @unique @map("slug")
  regionId   String 
  region     JobRegion @relation(fields: [regionId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  cities     JobCity[]

  @@map("job_countries")
}

model JobRegion {
  id         String       @unique @default(uuid())
  externalId Int?         @unique @map("external_id")
  name       String       @unique @map("name")
  slug       String       @unique @map("slug")
  countries  JobCountry[]

  @@map("job_regions")
}

model JobIndustry {
  id            String         @unique @default(uuid())
  externalId    Int?           @unique @map("external_id")
  name          String         @map("name")
  slug          String         @unique @map("slug")
  jobs          Job[]
  
  @@map("job_industries")
}

model JobType {
  id            String         @unique @default(uuid())
  externalId    Int?           @unique @map("external_id")
  name          String         @map("name")
  slug          String         @unique @map("slug")
  jobs          Job[]
  
  @@map("job_types")
}

enum OrganizationRole {
  ADMIN
  RECRUITER
}

enum JobLocType {
  REMOTE
  HYBRID
  OFFICE
}

enum JobCompType {
  SALARY
  HOURLY
}

enum JobStatus {
  DRAFT
  PAYMENT_PROCESSING
  OPEN
  PAUSED
  CLOSED
}

enum JobApplicationStatus {
  APPLIED
  WITHDRAWN
  INTERVIEWING
  HIRED
  CLOSED
}